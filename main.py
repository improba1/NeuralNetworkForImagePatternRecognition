# biblioteka do obliczeń numerycznych
import numpy as np  

def flatten(img):
    #przekształcamy obrazek do wektora i normalizujemy 0..1
    return img.reshape(-1) / 255.0  

#metoda aktywacji (ujemne liczby zastępuje zerem)
def relu(x): 
    return np.maximum(0, x)

def relu_derivative(x):
    #jeżeli liczba > 0 -> 1, jeżeli liczba < 0 -> 0
    return (x > 0).astype(float)  

#funkcja aktywacji, która przekształca liczby w prawdopodobieństwa
def softmax(z): 
    e = np.exp(z - np.max(z, axis=1, keepdims=True))
    return e / np.sum(e, axis=1, keepdims=True)

#funkcja straty, która mierzy, jak bardzo przewidywania sieci różnią się od prawdy
def cross_entropy(y_pred, y_true):
    return -np.sum(y_true * np.log(y_pred + 1e-9)) / y_true.shape[0]

def predict(img_pixels):
    img = np.array([
        [img_pixels[0], img_pixels[1]],
        [img_pixels[2], img_pixels[3]]
    ])
    x = flatten(img).reshape(1, -1)
    z1 = x @ W1 + b1
    a1 = relu(z1)
    z2 = a1 @ W2 + b2
    a2 = softmax(z2)
    return a2, np.argmax(a2)

X = []
y = []

base_imgs = [
    # jednokolorowy - klasa 1
    ([255,0,0], [255,0,0], [255,0,0], [255,0,0]),  
    ([77, 109, 243], [77, 109, 243], [77, 109, 243], [77, 109, 243]),
    ([111, 49, 152], [111, 49, 152], [111, 49, 152], [111, 49, 152]),
    ([45,45,45], [45,45,45], [45,45,45], [45,45,45]),  
    ([56, 56, 0], [56, 56, 0], [56, 56, 0], [56, 56, 0]),
    ([99, 7, 99], [99, 7, 99], [99, 7, 99], [99, 7, 99]),
    ([200, 0, 0], [200, 0, 0], [200, 0, 0], [200, 0, 0]),
    ([0, 200, 0], [0, 200, 0], [0, 200, 0], [0, 200, 0]),
    ([0, 0, 200], [0, 0, 200], [0, 0, 200], [0, 0, 200]),
    ([180, 20, 20], [180, 20, 20], [180, 20, 20], [180, 20, 20]),
    ([10, 150, 10], [10, 150, 10], [10, 150, 10], [10, 150, 10]),
    ([20, 20, 180], [20, 20, 180], [20, 20, 180], [20, 20, 180]),
    ([100, 100, 100], [100, 100, 100], [100, 100, 100], [100, 100, 100]),
    ([50, 0, 0], [50, 0, 0], [50, 0, 0], [50, 0, 0]),
    ([30,30,30], [30,30,30], [30,30,30], [30,30,30]),
    ([10,10,150], [10,10,150], [10,10,150], [10,10,150]),
    ([150,10,10], [150,10,10], [150,10,10], [150,10,10]),
    ([0,90,0], [0,90,0], [0,90,0], [0,90,0]),
    ([20,20,20], [20,20,20], [20,20,20], [20,20,20]),
    ([120,60,60], [120,60,60], [120,60,60], [120,60,60]),
    ([0,128,128], [0,128,128], [0,128,128], [0,128,128]),
    ([80,0,160], [80,0,160], [80,0,160], [80,0,160]),
    ([255,100,100], [255,100,100], [255,100,100], [255,100,100]),
    ([123, 231, 132], [123, 231, 132], [123, 231, 132], [123, 231, 132]),
    ([11, 22, 33], [11, 22, 33], [11, 22, 33], [11, 22, 33]),
    ([250, 250, 210], [250, 250, 210], [250, 250, 210], [250, 250, 210]),
    ([17, 100, 180], [17, 100, 180], [17, 100, 180], [17, 100, 180]),
    ([140, 80, 20], [140, 80, 20], [140, 80, 20], [140, 80, 20]),

    # pionowy - klasa 2
    ([0,0,255], [255,0,0], [0,0,255], [255,0,0]),  
    ([180, 180, 180], [0, 0, 0], [180, 180, 180], [0, 0, 0]),
    ([255, 163, 177], [0, 0, 0], [255, 163, 177], [0, 0, 0]),
    ([0,0,255], [255,0,0], [0,0,255], [255,0,0]),  
    ([58, 58, 58], [180, 180, 0], [58, 58, 58], [180, 180, 0]),
    ([40, 40, 40], [98, 0, 98], [40, 40, 40], [98, 0, 98]),
    ([0, 0, 100], [100, 0, 0], [0, 0, 100], [100, 0, 0]),
    ([180, 180, 100], [50, 50, 0], [180, 180, 100], [50, 50, 0]),
    ([20, 30, 40], [90, 0, 90], [20, 30, 40], [90, 0, 90]),
    ([0, 0, 200], [200, 0, 0], [0, 0, 200], [200, 0, 0]),
    ([150, 150, 200], [60, 60, 0], [150, 150, 200], [60, 60, 0]),
    ([30, 40, 50], [90, 0, 90], [30, 40, 50], [90, 0, 90]),
    ([100, 100, 100], [20, 20, 20], [100, 100, 100], [20, 20, 20]),
    ([90, 0, 90], [150, 0, 150], [90, 0, 90], [150, 0, 150]),
    ([0,0,0], [255,255,255], [0,0,0], [255,255,255]),
    ([70, 70, 200], [200, 200, 70], [70, 70, 200], [200, 200, 70]),
    ([255,100,0], [0,100,255], [255,100,0], [0,100,255]),
    ([30,30,60], [100,100,20], [30,30,60], [100,100,20]),
    ([10,10,200], [100,0,0], [10,10,200], [100,0,0]),
    ([0,255,0], [255,0,255], [0,255,0], [255,0,255]),
    ([50,50,200], [100,50,0], [50,50,200], [100,50,0]),
    ([0,200,255], [255,100,0], [0,200,255], [255,100,0]),
    ([90,90,90], [180,180,180], [90,90,90], [180,180,180]),
    ([10, 200, 100], [240, 10, 90], [10, 200, 100], [240, 10, 90]),
    ([20, 40, 60], [200, 180, 160], [20, 40, 60], [200, 180, 160]),
    ([0, 80, 160], [160, 80, 0], [0, 80, 160], [160, 80, 0]),
    ([90, 10, 200], [200, 10, 90], [90, 10, 200], [200, 10, 90]),
    ([22, 44, 66], [88, 110, 132], [22, 44, 66], [88, 110, 132]),

    # poziomy - klasa 3
    ([255,126,0], [255,126,0], [255,0,0], [255,0,0]),  
    ([111, 49, 152], [111, 49, 152], [255, 194, 14], [255, 194, 14]),
    ([168, 230, 29], [168, 230, 29], [255, 194, 14], [255, 194, 14]),
    ([56,126,0], [56,126,0], [66,66,66], [66,66,66]),  
    ([220, 30, 152], [220, 30, 152], [100, 100, 14], [100, 100, 14]),
    ([70, 230, 70], [70, 230, 70], [34, 34, 10], [34, 34, 10]),
    ([100, 100, 0], [100, 100, 0], [50, 50, 50], [50, 50, 50]),
    ([255, 128, 64], [255, 128, 64], [128, 64, 32], [128, 64, 32]),
    ([0, 100, 100], [0, 100, 100], [50, 50, 0], [50, 50, 0]),
    ([200, 150, 0], [200, 150, 0], [50, 50, 50], [50, 50, 50]),
    ([255, 200, 100], [255, 200, 100], [180, 160, 100], [180, 160, 100]),
    ([100, 255, 100], [100, 255, 100], [80, 80, 80], [80, 80, 80]),
    ([120, 120, 0], [120, 120, 0], [60, 60, 60], [60, 60, 60]),
    ([180, 130, 50], [180, 130, 50], [90, 90, 90], [90, 90, 90]),
    ([255, 0, 0], [255, 0, 0], [0, 0, 255], [0, 0, 255]),
    ([0, 255, 0], [0, 255, 0], [255, 0, 0], [255, 0, 0]),
    ([128, 128, 128], [128, 128, 128], [0, 0, 0], [0, 0, 0]),
    ([200,200,0], [200,200,0], [0,0,200], [0,0,200]),
    ([30,60,90], [30,60,90], [120,90,60], [120,90,60]),
    ([255,255,255], [255,255,255], [0,0,0], [0,0,0]),
    ([0,128,0], [0,128,0], [128,0,0], [128,0,0]),
    ([50,50,50], [50,50,50], [200,100,100], [200,100,100]),
    ([77,50,50], [77,50,50], [200,100,255], [200,100,255]),
    ([100, 0, 200], [100, 0, 200], [10, 100, 50], [10, 100, 50]),
    ([250, 210, 180], [250, 210, 180], [80, 120, 160], [80, 120, 160]),
    ([220, 60, 60], [220, 60, 60], [0, 180, 200], [0, 180, 200]),
    ([90, 200, 50], [90, 200, 50], [20, 20, 20], [20, 20, 20]),
    ([50, 150, 250], [50, 150, 250], [0, 100, 200], [0, 100, 200]),

    # diagonalny - klasa 4
    ([255,0,0], [255,255,0], [255,255,0], [255,0,0]),  
    ([255, 163, 177], [168, 230, 29], [168, 230, 29], [255, 163, 177]),
    ([255, 126, 0], [0, 183, 239], [0, 183, 239], [255, 126, 0]),
    ([60,0,60], [200,255,200], [200,255,200], [60,0,60]),  
    ([180, 180, 177], [0, 0, 0], [0, 0, 0], [180, 180, 177]),
    ([40, 40, 0], [0, 255, 255], [0, 255, 255], [40, 40, 0]),
    ([255, 50, 50], [0, 255, 0], [0, 255, 0], [255, 50, 50]),
    ([10, 20, 30], [200, 200, 200], [200, 200, 200], [10, 20, 30]),
    ([100, 0, 0], [0, 0, 255], [0, 0, 255], [100, 0, 0]),
    ([255, 0, 0], [0, 255, 0], [0, 255, 0], [255, 0, 0]),
    ([10, 20, 30], [200, 200, 200], [200, 200, 200], [10, 20, 30]),
    ([100, 0, 0], [0, 0, 255], [0, 0, 255], [100, 0, 0]),
    ([60, 0, 60], [180, 255, 180], [180, 255, 180], [60, 0, 60]),
    ([255, 255, 0], [0, 255, 255], [0, 255, 255], [255, 255, 0]),
    ([0,255,255], [255,0,0], [255,0,0], [0,255,255]),
    ([60, 60, 0], [255, 255, 255], [255, 255, 255], [60, 60, 0]),
    ([128, 0, 128], [0, 255, 0], [0, 255, 0], [128, 0, 128]),
    ([50, 50, 100], [200, 100, 200], [200, 100, 200], [50, 50, 100]),
    ([200,200,200], [50,50,50], [50,50,50], [200,200,200]),
    ([255,0,255], [0,255,0], [0,255,0], [255,0,255]),
    ([100,150,200], [50,100,150], [50,100,150], [100,150,200]),
    ([255,100,0], [0,255,100], [0,255,100], [255,100,0]),
    ([90,40,30], [180,180,180], [180,180,180], [90,40,30]),
    ([123, 123, 0], [0, 0, 255], [0, 0, 255], [123, 123, 0]),
    ([220, 220, 220], [90, 90, 90], [90, 90, 90], [220, 220, 220]),
    ([10, 90, 180], [250, 250, 250], [250, 250, 250], [10, 90, 180]),
    ([33, 66, 99], [99, 66, 33], [99, 66, 33], [33, 66, 99]),
    ([50, 0, 100], [255, 255, 255], [255, 255, 255], [50, 0, 100])
]
labels = (
        [[1,0,0,0]] * 28 +  # jednokolorowy
        [[0,1,0,0]] * 28 +  # pionowy
        [[0,0,1,0]] * 28 +  # poziomy
        [[0,0,0,1]] * 28    # diagonalny
    ) 


for img_pixels, lab in zip(base_imgs, labels):
    img = np.array([
        [img_pixels[0], img_pixels[1]],
        [img_pixels[2], img_pixels[3]]
    ])
    X.append(flatten(img))
    y.append(lab)

X = np.array(X)
y = np.array(y)

np.random.seed(42)
#12 wejść(4 piksele * 3 kolory) - 4 neurony ukryte
W1 = np.random.randn(12, 4) * 0.1  
b1 = np.zeros((1, 4))

#4 neurony ukryte - 4 klasy
W2 = np.random.randn(4, 4) * 0.1   
b2 = np.zeros((1, 4))

lr = 0.1
epochs = 2500

for epoch in range(epochs):
    Z1 = X @ W1 + b1
    A1 = relu(Z1)
    Z2 = A1 @ W2 + b2
    A2 = softmax(Z2)
    loss = cross_entropy(A2, y)
    dZ2 = A2 - y
    dW2 = A1.T @ dZ2 / len(X)
    db2 = np.sum(dZ2, axis=0, keepdims=True) / len(X)
    dA1 = dZ2 @ W2.T
    dZ1 = dA1 * relu_derivative(Z1)
    dW1 = X.T @ dZ1 / len(X)
    db1 = np.sum(dZ1, axis=0, keepdims=True) / len(X)

    W2 -= lr * dW2
    b2 -= lr * db2
    W1 -= lr * dW1
    b1 -= lr * db1
    if epoch % 50 == 0:
        print(f"epoch {epoch}, loss: {loss:.4f}")

probs, pred = predict([
    [66, 66, 66], [66, 66, 66], 
    [66, 66, 66], [66, 66, 66]
])
print("Probabilities:", probs)
print("class 1")
print("Predicted class:", pred + 1)

probs, pred = predict([
    [0, 50, 100], [100, 50, 0],
    [0, 50, 100], [100, 50, 0]
])
print("Probabilities:", probs)
print("class 2")
print("Predicted class:", pred + 1)

probs, pred = predict([
    [100, 100, 70], [100, 100, 70], 
    [34, 34, 255], [34, 34, 255]
])
print("Probabilities:", probs)
print("class 3")
print("Predicted class:", pred + 1)

probs, pred = predict([
    [180, 180, 180], [80, 80, 255], 
    [80, 80, 255], [180, 180, 180]
])
print("Probabilities:", probs)
print("class 4")
print("Predicted class:", pred + 1)